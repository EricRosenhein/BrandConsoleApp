using System.Globalization;
using DT = System.Data;
using QC = Microsoft.Data.SqlClient;
using BrandConsoleApp.Util;
using System.Security.Cryptography.X509Certificates;

namespace BrandConsoleApp.Model
{

    public class Brand : Persistable
    {

        protected int? ID { get; set; }
        protected string Name { get; set; }
        protected string Notes { get; set; }

        public Brand()
        {
            ID = 0;
            Name = "";
            Notes = "";
        }

        public Brand(int Id, string nm, string notes)
        {
            ID = Id;
            Name = nm;
            Notes = notes;
        }

        public Brand(string nm, string notes)
        {
            Name = nm;
            Notes = notes;
        }

        public void SetValues(string nm, string nts)
        {
            Name = nm;
            Notes = nts;
        }
        public void Populate(int idToUse)
        {
            string IDStr = idToUse + "";
            PopulateHelper(IDStr);
        }

        protected override void ConstructPopulateQueryCommand(string idToUse, QC.SqlCommand command)
        {
            string query = "SELECT * FROM Brand WHERE (ID = " + idToUse + ");";
            command.CommandText = query;

        }

        protected override void ProcessPopulateQueryResult( QC.SqlDataReader reader)
        {
            while (reader.Read())
            {
                ID = reader.GetInt32(0);
                Name = reader.GetString(1);
                Notes = reader.GetString(2);
            }
        }

        protected override void SetupCommandForInsert(QC.SqlCommand command)
        {
            // Taking a 'PreparedStatement' approach here, avoids SQL Injection  
            // THIS IS IMPORTANT 

            QC.SqlParameter parameter;

            string insertQuery = "INSERT INTO Brand (Name, Notes) " +
                " OUTPUT INSERTED.ID " +
                " VALUES (@Name, @Notes);";

            command.CommandText = insertQuery;

            parameter = new QC.SqlParameter("@Name", DT.SqlDbType.NVarChar, 100);  // Fix Type and Length 
            parameter.Value = Name;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Notes", DT.SqlDbType.NVarChar, 1000); // Fix Type and Length  
            parameter.Value = Notes;
            command.Parameters.Add(parameter);

        }

        protected override void SetAutogeneratedIDFromInsert(int genID)
        {
            this.ID = genID;
        }

        protected override void SetupCommandForUpdate(QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string updateQuery = "UPDATE Brand" +
               " SET Name = @Name, Notes = @Notes " +
               " WHERE (ID = @Id);";

            command.CommandText = updateQuery;

            parameter = new QC.SqlParameter("@Name", DT.SqlDbType.NVarChar, 100);  // Fix Type and Length 
            parameter.Value = Name;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Notes", DT.SqlDbType.NVarChar, 1000); // Fix Type and Length  
            parameter.Value = Notes;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Id", DT.SqlDbType.Int);  // Fix Type and Length 
            parameter.Value = ID;
            command.Parameters.Add(parameter);

                
        }

        protected override bool IsNewObject()
        {
            if (ID == null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        
        public void Save(QC.SqlConnection connection)
        {

           
        }

        public override string ToString()
        {
            return "ID: " + ID + "; Name: " + Name + "; Notes: " + Notes;
        }

    }

}