using BrandConsoleApp.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DT = System.Data;
using QC = Microsoft.Data.SqlClient;

namespace BrandConsoleApp.Model
{
    public abstract class Persistable
    {
        protected abstract bool IsNewObject();

        protected abstract void SetupCommandForInsert(QC.SqlCommand command);

        protected abstract void SetupCommandForUpdate(QC.SqlCommand command);

        protected abstract void SetAutogeneratedIDFromInsert(int genID);

        public virtual void Save()
        {
            using (QC.SqlConnection connection = new QC.SqlConnection(Utilities.GetConnectionString()))
            {
                connection.Open();

                using (var command = new QC.SqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = DT.CommandType.Text;

                    if (IsNewObject())
                    {
                        SetupCommandForInsert(command);

                        int genID = (int)command.ExecuteScalar();
                        SetAutogeneratedIDFromInsert(genID);
                    }
                    else
                    {
                        SetupCommandForUpdate(command);
                        command.ExecuteNonQuery();
                    }
                }

            }
        }


        protected void PopulateHelper(string populateData)
        {
            // Code from website 
            using (QC.SqlConnection connection = new QC.SqlConnection(Utilities.GetConnectionString()))
            {
                connection.Open();

                using (var command = new QC.SqlCommand())
                {

                    command.Connection = connection;
                    command.CommandType = DT.CommandType.Text;
                    ConstructPopulateQueryCommand(populateData, command);

                    QC.SqlDataReader reader = command.ExecuteReader();

                    ProcessPopulateQueryResult(reader);

                }
            }
        }

        protected abstract void ConstructPopulateQueryCommand(string populateData, QC.SqlCommand command);

        protected abstract void ProcessPopulateQueryResult(QC.SqlDataReader reader);

    }
}
