using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using QC = Microsoft.Data.SqlClient;
using DT = System.Data;
using static Azure.Core.HttpHeader;
using System.Xml.Linq;
using Microsoft.Data.SqlClient;

namespace BrandConsoleApp.Model
{
    public class AuthorizedUser : Persistable
    {
        protected int?  ID { get; set; }
        protected string userName { get; set; } 
        protected string password { get; set; }

        public AuthorizedUser()
        {
            ID = 0;
            userName = "";
            password = "";
        }

        public AuthorizedUser(string usName, string pwd)
        {

            userName = usName;
            password = pwd;
        }

        public void SetValues(string nm, string pwd)
        {
            userName = nm;
            password = pwd;
        }

        public virtual void Populate(int idToUse)
        {
            string IDStr = idToUse + "";
            Dictionary<string, Object>  dic = new Dictionary<string, Object>();
            dic["ID"] = IDStr;
            PopulateHelper(dic);
        }

        protected override void ConstructPopulateQueryCommand(Dictionary<string, Object> dictIdToUse, QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string query = @"SELECT * FROM AuthorizedUser WHERE (ID = @NP);";

            command.CommandText = query;

            parameter = new QC.SqlParameter("@NP", DT.SqlDbType.Int);
            parameter.Value = dictIdToUse["ID"];
            command.Parameters.Add(parameter);

        }

        protected override void ProcessPopulateQueryResult(QC.SqlDataReader reader)
        {
            while (reader.Read())
            {
                ID = reader.GetInt32(0);
                userName = reader.GetString(1);
                password = reader.GetString(2);
            }
        }

        protected override void SetupCommandForInsert(QC.SqlCommand command)
        { 

            QC.SqlParameter parameter;

            string insertQuery = "INSERT INTO AuthorizedUser (Username, Password) " +
                " OUTPUT INSERTED.ID " +
                " VALUES (@Username, @Password);";

            command.CommandText = insertQuery;

            parameter = new QC.SqlParameter("@Username", DT.SqlDbType.NVarChar, 100);  // Fix Type and Length 
            parameter.Value = this.userName;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Password", DT.SqlDbType.NVarChar, 100); // Fix Type and Length  
            parameter.Value = this.password;
            command.Parameters.Add(parameter);

        }
        protected override void SetAutogeneratedIDFromInsert(int genID)
        {
            this.ID = genID;
        }

        protected override void SetupCommandForUpdate(QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string updateQuery = "UPDATE AuthorizedUser" +
               " SET Username = @Username, Password = @Password " +
               " WHERE (ID = @ID);";

            command.CommandText = updateQuery;

            parameter = new QC.SqlParameter("@Username", DT.SqlDbType.NVarChar, 100);  // Fix Type and Length 
            parameter.Value = this.userName;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Password", DT.SqlDbType.NVarChar, 100); // Fix Type and Length  
            parameter.Value = this.password;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@ID", DT.SqlDbType.Int);  // Fix Type and Length 
            parameter.Value = this.ID;
            command.Parameters.Add(parameter);


        }
        protected override bool IsNewObject()
        {
            if (ID == null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        protected override ResultMessage GetResultMessageForSave()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "User with name: " + this.userName
                    + " saved successfully into database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForSave(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in saving User with Name: " + this.userName +
                " into database!");
            return mesg;
        }

        public override string ToString()
        {
            return "ID: " + ID + "; Name: " + userName + "; Notes: " + password;
        }



        protected override ResultMessage GetErrorMessageForPopulate(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in retrieving User with ID: " + this.userID +
                " from database!");
            return mesg;
        }

        protected override ResultMessage GetResultMessageForPopulate()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "Authorized User with ID: " + this.userID +
                " retrieved successfully!");
            return mesg;
        }
    }



    }

